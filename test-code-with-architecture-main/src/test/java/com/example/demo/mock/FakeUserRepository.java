package com.example.demo.mock;

import com.example.demo.common.domain.exception.ResourceNotFoundException;
import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> datas = new ArrayList<>();

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return datas.stream()
                .filter(u -> u.getId().equals(id) && u.getStatus().equals(userStatus))
                .findFirst();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return datas.stream()
                .filter(u -> u.getEmail().equals(email) && u.getStatus().equals(userStatus))
                .findFirst();
    }

    @Override
    public User save(User user) {
        if (user == null) {
            return null;
        }

        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            datas.add(newUser);
            return newUser;
        }

        datas.removeIf(u -> u.getId().equals(user.getId()));
        datas.add(user);
        return user;
    }

    @Override
    public Optional<User> findById(long id) {
        return datas.stream()
                .filter(u -> u.getId().equals(id))
                .findFirst();
    }
}
